import { useContext, useEffect, useState } from "react";
import { LoginRelatedContext } from "../contexts/LoginRelated";
import { Link, useNavigate } from "react-router-dom";
import { addUser, getTopics, getUsernames, getUserDetails } from "../apiRequests";
import { capitaliseFirstChar, showAlert } from "../utils";
import { Button, Nav, Navbar, NavDropdown } from "react-bootstrap";
import { signInWithGoogle, googleAccountSignOut } from "../firebase";

const NavBar = () => {
  const [topics, setTopics] = useState([]);
  const [usernames, setUsernames] = useState([]);

  const {
    loggedIn,
    setLoggedIn,
    loggedInWithGoogle,
    setLoggedInWithGoogle,
    setGoogleAccountDetails,
    name,
    setName,
    username,
    setUsername,
  } = useContext(LoginRelatedContext);

  let navigate = useNavigate();

  useEffect(() => {
    async function fetchTopics() {
      const topics = await getTopics();
      setTopics(topics);
    }
    async function fetchUsernames() {
      setUsernames(await getUsernames());
    }
    fetchTopics();
    fetchUsernames();
  }, []);

  const handleSignInWithGoogle = async () => {
    const result = await signInWithGoogle();
    if (!result.successful) {
      showAlert(result.err, "danger");
      return;
    }

    showAlert("Google authentication successful.", "success");
    setLoggedIn(true);
    setLoggedInWithGoogle(true);
    setGoogleAccountDetails(result.userData);
    setName(result.userData.displayName.trim().split(" ")[0]);
    localStorage.setItem("loggedInWithGoogle", true);
    localStorage.setItem("googleAccountDetails", JSON.stringify(result.userData));

    if (!localStorage.getItem("username")) {
      const autoGeneratedUsername = `user${Date.now()}`;
      showAlert("Creating a username for you...", "info");

      if (await addUser(result.userData, autoGeneratedUsername)) {
        showAlert(`Username created. You are <strong>${autoGeneratedUsername}</strong>`, "success");
        setUsername(autoGeneratedUsername);
        localStorage.setItem("username", autoGeneratedUsername);
        return;
      }
      showAlert("Unable to create a user. Please try again later.", "danger");
      // The user has previously logged in using Google.
      // Use the username that was generated back then.
    } else {
      setUsername(localStorage.getItem("username"));
    }
  };

  const handleUserSelected = async (username) => {
    if (window.location.pathname.includes("profile")) {
      navigate(`/profile/${username}`, { replace: true });
    }
    const { name } = await getUserDetails(username);
    setName(name.split(" ")[0]);
    setLoggedIn(true);
    setUsername(username);
  };

  const logOut = async () => {
    navigate("/");
    localStorage.setItem("loggedInWithGoogle", false);
    localStorage.removeItem("googleAccountDetails");

    if (loggedInWithGoogle) {
      setLoggedIn(false);
      setLoggedInWithGoogle(false);
      return;
    }

    const result = await googleAccountSignOut();

    if (!result.successful) {
      showAlert(result.error, "danger");
      return;
    }
    setLoggedIn(false);
  };

  return (
    <>
      <Navbar id="navbar" bg="dark" variant="dark" expand="md">
        <Link to={"/"}>
          <Navbar.Brand>NotReddit</Navbar.Brand>
        </Link>

        <Navbar.Toggle aria-controls="responsive-navbar-nav" />
        <Navbar.Collapse id="responsive-navbar-nav">
          <Nav className="me-auto">
            {topics.map((topic) => {
              return (
                <Link key={topic.slug} to={`/topics/${topic.slug}`}>
                  <Nav.Link href={`/topics/${topic.slug}`}>
                    {capitaliseFirstChar(topic.slug)}
                  </Nav.Link>
                </Link>
              );
            })}
            <Link to={"/"}>
              <Nav.Link href={"/"}>All</Nav.Link>
            </Link>
          </Nav>
          {!loggedIn ? (
            <div id="logInSignInDiv">
              <NavDropdown title="Login" id="basic-nav-dropdown">
                <NavDropdown.Item disabled>as a pre-made user:</NavDropdown.Item>
                <NavDropdown.Divider />
                {usernames.map((username) => {
                  return (
                    <NavDropdown.Item key={username} onClick={() => handleUserSelected(username)}>
                      {username}
                    </NavDropdown.Item>
                  );
                })}
                <NavDropdown.Divider />
                <Button size="sm" onClick={handleSignInWithGoogle}>
                  using your Google account
                </Button>
              </NavDropdown>
            </div>
          ) : null}
          {loggedIn ? (
            <div id="loggedInLogOut">
              <p id="loggedInAs" className="navbar-text">
                Hello, {name}!
              </p>
              <Link to={`/profile/${username}`}>
                <p id="viewProfile" className="navbar-text">
                  View Profile
                </p>
              </Link>

              <p className="navbar-text" id="logOut" onClick={logOut}>
                Log out
              </p>
            </div>
          ) : (
            <p>Loading...</p>
          )}
        </Navbar.Collapse>
      </Navbar>
      <div id="alertWrapper" className="mt-2"></div>
    </>
  );
};

export default NavBar;
